generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid              String         @id @default(dbgenerated("\"substring\"((gen_random_uuid())::text, 1, 6)")) @db.Char(6)
  username         String         @unique
  password         String
  google_id        String?
  email            String
  login_method     String         @default("LOCAL")
  files            File[]
  mails            Mail[]
  approved_MRs     MergeRequest[] @relation("Approver")
  sent_MRs         MergeRequest[] @relation("Sender")
  tasks            Task[]
  managed_projects Project[]      @relation("ManagerProjects")
  project_ids      Project[]      @relation("MemberProjects")
}

model Project {
  pid          String   @id @default(dbgenerated("\"substring\"((gen_random_uuid())::text, 1, 6)")) @db.Char(6)
  name         String
  description  String
  model        String
  phase        String
  created_time DateTime @default(now())
  files        File[]
  tasks        Task[]
  manager_ids  User[]   @relation("ManagerProjects")
  members      User[]   @relation("MemberProjects")
}

model Task {
  tid           String         @id @default(dbgenerated("\"substring\"((gen_random_uuid())::text, 1, 6)")) @db.Char(6)
  name          String
  description   String
  status        String         @default("Undone")
  comment       String?
  created_time  DateTime       @default(now())
  due           DateTime       @default(dbgenerated("((now() + '7 days'::interval))::timestamp without time zone"))
  project_pid   String
  assignee_id   String
  files         File[]
  mergeRequests MergeRequest[]
  assignee      User           @relation(fields: [assignee_id], references: [uid])
  project       Project        @relation(fields: [project_pid], references: [pid])
}

model File {
  fid           String        @id @default(dbgenerated("\"substring\"((gen_random_uuid())::text, 1, 6)")) @db.Char(6)
  name          String
  size          String
  uploaded_time DateTime      @default(now())
  project_pid   String?
  task_tid      String
  uploader_id   String
  extension     String
  mrid          String?       @db.Char(6)
  path          String
  extended_name String?
  status        String        @default("None")
  mergeRequest  MergeRequest? @relation(fields: [mrid], references: [mrid])
  project       Project?      @relation(fields: [project_pid], references: [pid])
  task          Task          @relation(fields: [task_tid], references: [tid])
  uploader      User          @relation(fields: [uploader_id], references: [uid])
}

model MergeRequest {
  mrid         String   @id @default(dbgenerated("\"substring\"((gen_random_uuid())::text, 1, 6)")) @db.Char(6)
  comment      String?
  status       String   @default("Pending")
  created_at   DateTime @default(now())
  sender_uid   String
  approver_uid String?
  tid          String
  files        File[]
  mails        Mail[]
  approver     User?    @relation("Approver", fields: [approver_uid], references: [uid])
  sender       User     @relation("Sender", fields: [sender_uid], references: [uid])
  task         Task     @relation(fields: [tid], references: [tid])
}

model Mail {
  mid           String       @id @default(dbgenerated("\"substring\"((gen_random_uuid())::text, 1, 6)")) @db.Char(6)
  content       String
  category      String       @default("Authorization")
  created_at    DateTime     @default(now())
  mrid          String
  uid           String
  merge_request MergeRequest @relation(fields: [mrid], references: [mrid])
  recipient     User         @relation(fields: [uid], references: [uid])
}
